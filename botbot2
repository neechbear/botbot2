#!/home/nicolaw/webroot/perl-5.8.7/bin/perl -w
# vim:ts=4:sw=4:tw=78

use 5.8.5;
use strict;
use warnings;
use FindBin qw($Bin);
use lib ("$Bin/lib", "$Bin/plugin");

use plugin;
use Proc::DaemonLite qw(:all);
use File::Basename qw(fileparse);
use Parse::Colloquy::Bot qw(:all);
use Config::General qw();
use IO::Socket qw();
use Time::HiRes qw();
use Module::Pluggable(
		search_dirs => [ "$Bin/plugin" ],
		search_path => [ "plugin" ],
		instantiate => 'new',
	);

use vars qw($VERSION $SELF @PLUGINS);

($SELF = $0) =~ s|^.*/||;
$VERSION = sprintf('%d', q$Revision$ =~ /(\d+)/g);

$SIG{'TERM'} = \&do_term;
$SIG{'HUP'} = \&do_relaunch;
$SIG{'__DIE__'} = \&log_die;
$SIG{'__WARN__'} = \&log_warn;

sleep(4) if @ARGV && grep(/^(-p|--pause)$/i,@ARGV);
init_server() if @ARGV && grep(/^(-d|--daemon)$/i,@ARGV);
chdir($Bin) || log_die("Unable to change directory to $Bin: $!");

my ($basename, $dirname, $extension) = fileparse($0, '\.[^\.]+');
my $config = read_config("$dirname$basename.cfg");
my $socket = connect_to_talker($config->{host},$config->{port});

$SIG{'ALRM'} = \&process;
process($_) while local $_ = <$socket>;
#$socket->shutdown();
kill_children() if keys %CHILDREN;

exit;

sub process {
	Time::HiRes::alarm(0);
	for (@_) {
		my $event = Parse::Colloquy::Bot::parse_line($_);

		$event->{'alarm'} = 1 if $event->{msgtype} eq 'ALRM';
		for (keys %{$event}) {
			$event->{$_} = '' if !defined($event->{$_});
		}

		for my $plugin (sort(load_plugins($socket))) {
			eval {
				alarm(10);
				local $SIG{'ALRM'} = sub { die("Timeout") };
				my $rtn = $plugin->handle($event);
				log_debug(ref($plugin) . ": $rtn") if $rtn && "$rtn" ne "1";
			};
			alarm(0);
		}
	}
	Time::HiRes::alarm(1);
}

sub do_term {
	log_notice("TERM signal received, terminating children...\n");
	kill_children();
	exit 0;
}

sub connect_to_talker {
	my $socket = IO::Socket::INET->new(
			PeerAddr => shift,
			PeerPort => shift,
			Proto => 'tcp',
			Timeout => 3,
		) || log_die("Can't make socket: $@");
}

sub read_config {
	my $conf = new Config::General( -ConfigFile => shift,
			map { ( "-$_", 1 ) } qw(UseApacheInclude IncludeRelative
				LowerCaseNames MergeDuplicateBlocks AllowMultiOptions
				MergeDuplicateOptions AutoTrue)
		);
	return {$conf->getall};
}

sub load_plugins {
	return @PLUGINS if @PLUGINS;
	eval {
		for my $plugin ( __PACKAGE__->plugins(
							'_private' => { socket => $socket },
							root => $dirname,
							config => $config,
							logfile => "$dirname/logs/$config->{username}.log",
						) ) {
			my ($friendly) = ref($plugin) =~ m/^plugin(?:\/|\:\:)(\S+)(?:\.pm)?$/;
			next if exists($config->{plugins}->{lc($friendly)}) &&
					$config->{plugins}->{lc($friendly)} =~ /^disabled?$/i;
			push @PLUGINS, $plugin;
			log_info("Loaded plugin $friendly");
		}
	};
	return @PLUGINS;
}

1;

__END__

